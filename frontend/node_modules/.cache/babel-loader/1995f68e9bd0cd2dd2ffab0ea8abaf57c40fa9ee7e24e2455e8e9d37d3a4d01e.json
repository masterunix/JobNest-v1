{"ast":null,"code":"import axios from'axios';// Create axios instance\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:5001/api',headers:{'Content-Type':'application/json'}});// Request interceptor\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');const user=JSON.parse(localStorage.getItem('user')||'null');if(token){config.headers.Authorization=`Bearer ${token}`;}if(user&&(user._id||user.id)){config.headers['user-id']=user._id||user.id;}return config;},error=>{return Promise.reject(error);});// Response interceptor\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});// Job API functions\nexport const jobAPI={// Get all jobs with filters\ngetJobs:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return api.get('/jobs',{params});},// Get single job\ngetJob:id=>api.get(`/jobs/${id}`),// Create job (employers only)\ncreateJob:data=>api.post('/jobs',data),// Update job\nupdateJob:(id,data)=>api.put(`/jobs/${id}`,data),// Delete job\ndeleteJob:id=>api.delete(`/jobs/${id}`),// Apply for job\napplyForJob:(id,data)=>api.post(`/jobs/${id}/apply`,data),getApplicationsForUser:()=>api.get('/users/applications')};// User API functions\nexport const userAPI={// Get user profile\ngetProfile:()=>api.get('/users/profile'),// Update profile\nupdateProfile:data=>api.put('/users/profile',data),// Change password\nchangePassword:data=>api.put('/users/password',data),// Get user applications\ngetApplications:()=>api.get('/users/applications'),// Get employer jobs\ngetEmployerJobs:()=>api.get('/users/jobs'),// Update application status\nupdateApplicationStatus:(jobId,applicationId,status)=>api.put(`/users/jobs/${jobId}/applications/${applicationId}`,{status}),getProfileCompletion:()=>api.get('/users/profile/completion')};// Auth API functions\nexport const authAPI={// Register\nregister:data=>api.post('/auth/register',data),// Login\nlogin:data=>api.post('/auth/login',data),// Get current user\ngetCurrentUser:()=>api.get('/auth/me'),// Forgot password\nforgotPassword:email=>api.post('/auth/forgot-password',{email})};// Campaign API functions\nexport const campaignAPI={// Get all campaigns\ngetCampaigns:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return api.get('/campaigns',{params});},// Get single campaign\ngetCampaign:id=>api.get(`/campaigns/${id}`),// Create campaign\ncreateCampaign:data=>api.post('/campaigns',data),// Razorpay integration\ncreateRazorpayOrder:(campaignId,data)=>api.post(`/campaigns/${campaignId}/razorpay-order`,data),verifyRazorpayPayment:(campaignId,data)=>api.post(`/campaigns/${campaignId}/razorpay-verify`,data),// Update campaign\nupdateCampaign:(id,data)=>api.put(`/campaigns/${id}`,data),// Delete campaign\ndeleteCampaign:id=>api.delete(`/campaigns/${id}`),// Upload campaign media\nuploadCampaignMedia:(id,file)=>{const formData=new FormData();formData.append('file',file);return api.post(`/campaigns/${id}/upload-media`,formData,{headers:{'Content-Type':'multipart/form-data'}});}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","user","JSON","parse","Authorization","_id","id","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","jobAPI","getJobs","params","arguments","length","undefined","get","getJob","createJob","data","post","updateJob","put","deleteJob","delete","applyForJob","getApplicationsForUser","userAPI","getProfile","updateProfile","changePassword","getApplications","getEmployerJobs","updateApplicationStatus","jobId","applicationId","getProfileCompletion","authAPI","register","login","getCurrentUser","forgotPassword","email","campaignAPI","getCampaigns","getCampaign","createCampaign","createRazorpayOrder","campaignId","verifyRazorpayPayment","updateCampaign","deleteCampaign","uploadCampaignMedia","file","formData","FormData","append"],"sources":["/Users/vatsalgoyal/Desktop/Projects/JobNest/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    const user = JSON.parse(localStorage.getItem('user') || 'null');\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    if (user && (user._id || user.id)) {\n      config.headers['user-id'] = user._id || user.id;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Job API functions\nexport const jobAPI = {\n  // Get all jobs with filters\n  getJobs: (params = {}) => api.get('/jobs', { params }),\n  \n  // Get single job\n  getJob: (id) => api.get(`/jobs/${id}`),\n  \n  // Create job (employers only)\n  createJob: (data) => api.post('/jobs', data),\n  \n  // Update job\n  updateJob: (id, data) => api.put(`/jobs/${id}`, data),\n  \n  // Delete job\n  deleteJob: (id) => api.delete(`/jobs/${id}`),\n  \n  // Apply for job\n  applyForJob: (id, data) => api.post(`/jobs/${id}/apply`, data),\n  getApplicationsForUser: () => api.get('/users/applications'),\n};\n\n// User API functions\nexport const userAPI = {\n  // Get user profile\n  getProfile: () => api.get('/users/profile'),\n  \n  // Update profile\n  updateProfile: (data) => api.put('/users/profile', data),\n  \n  // Change password\n  changePassword: (data) => api.put('/users/password', data),\n  \n  // Get user applications\n  getApplications: () => api.get('/users/applications'),\n  \n  // Get employer jobs\n  getEmployerJobs: () => api.get('/users/jobs'),\n  \n  // Update application status\n  updateApplicationStatus: (jobId, applicationId, status) => \n    api.put(`/users/jobs/${jobId}/applications/${applicationId}`, { status }),\n  getProfileCompletion: () => api.get('/users/profile/completion'),\n};\n\n// Auth API functions\nexport const authAPI = {\n  // Register\n  register: (data) => api.post('/auth/register', data),\n  \n  // Login\n  login: (data) => api.post('/auth/login', data),\n  \n  // Get current user\n  getCurrentUser: () => api.get('/auth/me'),\n  \n  // Forgot password\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\n};\n\n// Campaign API functions\nexport const campaignAPI = {\n  // Get all campaigns\n  getCampaigns: (params = {}) => api.get('/campaigns', { params }),\n\n  // Get single campaign\n  getCampaign: (id) => api.get(`/campaigns/${id}`),\n\n  // Create campaign\n  createCampaign: (data) => api.post('/campaigns', data),\n\n  // Razorpay integration\n  createRazorpayOrder: (campaignId, data) => api.post(`/campaigns/${campaignId}/razorpay-order`, data),\n  verifyRazorpayPayment: (campaignId, data) => api.post(`/campaigns/${campaignId}/razorpay-verify`, data),\n\n  // Update campaign\n  updateCampaign: (id, data) => api.put(`/campaigns/${id}`, data),\n\n  // Delete campaign\n  deleteCampaign: (id) => api.delete(`/campaigns/${id}`),\n\n  // Upload campaign media\n  uploadCampaignMedia: (id, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    return api.post(`/campaigns/${id}/upload-media`, formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}