{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  const user = JSON.parse(localStorage.getItem('user') || 'null');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  if (user && (user._id || user.id)) {\n    config.headers['user-id'] = user._id || user.id;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Job API functions\nexport const jobAPI = {\n  // Get all jobs with filters\n  getJobs: (params = {}) => api.get('/jobs', {\n    params\n  }),\n  // Get single job\n  getJob: id => api.get(`/jobs/${id}`),\n  // Create job (employers only)\n  createJob: data => api.post('/jobs', data),\n  // Update job\n  updateJob: (id, data) => api.put(`/jobs/${id}`, data),\n  // Delete job\n  deleteJob: id => api.delete(`/jobs/${id}`),\n  // Apply for job\n  applyForJob: (id, data) => api.post(`/jobs/${id}/apply`, data),\n  getApplicationsForUser: () => api.get('/jobs/applications'),\n  getSavedJobsForUser: () => api.get('/jobs/saved'),\n  saveJob: id => api.post(`/jobs/${id}/save`)\n};\n\n// User API functions\nexport const userAPI = {\n  // Get user profile\n  getProfile: () => api.get('/users/profile'),\n  // Update profile\n  updateProfile: data => api.put('/users/profile', data),\n  // Change password\n  changePassword: data => api.put('/users/password', data),\n  // Get user applications\n  getApplications: () => api.get('/users/applications'),\n  // Get employer jobs\n  getEmployerJobs: () => api.get('/users/jobs'),\n  // Update application status\n  updateApplicationStatus: (jobId, applicationId, status) => api.put(`/users/jobs/${jobId}/applications/${applicationId}`, {\n    status\n  }),\n  getProfileCompletion: () => api.get('/users/profile/completion')\n};\n\n// Auth API functions\nexport const authAPI = {\n  // Register\n  register: data => api.post('/auth/register', data),\n  // Login\n  login: data => api.post('/auth/login', data),\n  // Get current user\n  getCurrentUser: () => api.get('/auth/me'),\n  // Forgot password\n  forgotPassword: email => api.post('/auth/forgot-password', {\n    email\n  })\n};\n\n// Campaign API functions\nexport const campaignAPI = {\n  // Get all campaigns\n  getCampaigns: (params = {}) => api.get('/campaigns', {\n    params\n  }),\n  // Get single campaign\n  getCampaign: id => api.get(`/campaigns/${id}`),\n  // Create campaign\n  createCampaign: data => api.post('/campaigns', data),\n  // Razorpay integration\n  createRazorpayOrder: (campaignId, data) => api.post(`/campaigns/${campaignId}/razorpay-order`, data),\n  verifyRazorpayPayment: (campaignId, data) => api.post(`/campaigns/${campaignId}/razorpay-verify`, data),\n  // Update campaign\n  updateCampaign: (id, data) => api.put(`/campaigns/${id}`, data),\n  // Delete campaign\n  deleteCampaign: id => api.delete(`/campaigns/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","user","JSON","parse","Authorization","_id","id","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","jobAPI","getJobs","params","get","getJob","createJob","data","post","updateJob","put","deleteJob","delete","applyForJob","getApplicationsForUser","getSavedJobsForUser","saveJob","userAPI","getProfile","updateProfile","changePassword","getApplications","getEmployerJobs","updateApplicationStatus","jobId","applicationId","getProfileCompletion","authAPI","register","login","getCurrentUser","forgotPassword","email","campaignAPI","getCampaigns","getCampaign","createCampaign","createRazorpayOrder","campaignId","verifyRazorpayPayment","updateCampaign","deleteCampaign"],"sources":["/Users/vatsalgoyal/Desktop/Projects/JobNest/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5001/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    const user = JSON.parse(localStorage.getItem('user') || 'null');\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    if (user && (user._id || user.id)) {\n      config.headers['user-id'] = user._id || user.id;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Job API functions\nexport const jobAPI = {\n  // Get all jobs with filters\n  getJobs: (params = {}) => api.get('/jobs', { params }),\n  \n  // Get single job\n  getJob: (id) => api.get(`/jobs/${id}`),\n  \n  // Create job (employers only)\n  createJob: (data) => api.post('/jobs', data),\n  \n  // Update job\n  updateJob: (id, data) => api.put(`/jobs/${id}`, data),\n  \n  // Delete job\n  deleteJob: (id) => api.delete(`/jobs/${id}`),\n  \n  // Apply for job\n  applyForJob: (id, data) => api.post(`/jobs/${id}/apply`, data),\n  getApplicationsForUser: () => api.get('/jobs/applications'),\n  getSavedJobsForUser: () => api.get('/jobs/saved'),\n  saveJob: (id) => api.post(`/jobs/${id}/save`),\n};\n\n// User API functions\nexport const userAPI = {\n  // Get user profile\n  getProfile: () => api.get('/users/profile'),\n  \n  // Update profile\n  updateProfile: (data) => api.put('/users/profile', data),\n  \n  // Change password\n  changePassword: (data) => api.put('/users/password', data),\n  \n  // Get user applications\n  getApplications: () => api.get('/users/applications'),\n  \n  // Get employer jobs\n  getEmployerJobs: () => api.get('/users/jobs'),\n  \n  // Update application status\n  updateApplicationStatus: (jobId, applicationId, status) => \n    api.put(`/users/jobs/${jobId}/applications/${applicationId}`, { status }),\n  getProfileCompletion: () => api.get('/users/profile/completion'),\n};\n\n// Auth API functions\nexport const authAPI = {\n  // Register\n  register: (data) => api.post('/auth/register', data),\n  \n  // Login\n  login: (data) => api.post('/auth/login', data),\n  \n  // Get current user\n  getCurrentUser: () => api.get('/auth/me'),\n  \n  // Forgot password\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\n};\n\n// Campaign API functions\nexport const campaignAPI = {\n  // Get all campaigns\n  getCampaigns: (params = {}) => api.get('/campaigns', { params }),\n\n  // Get single campaign\n  getCampaign: (id) => api.get(`/campaigns/${id}`),\n\n  // Create campaign\n  createCampaign: (data) => api.post('/campaigns', data),\n\n  // Razorpay integration\n  createRazorpayOrder: (campaignId, data) => api.post(`/campaigns/${campaignId}/razorpay-order`, data),\n  verifyRazorpayPayment: (campaignId, data) => api.post(`/campaigns/${campaignId}/razorpay-verify`, data),\n\n  // Update campaign\n  updateCampaign: (id, data) => api.put(`/campaigns/${id}`, data),\n\n  // Delete campaign\n  deleteCampaign: (id) => api.delete(`/campaigns/${id}`),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}